module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output matrix[16],
    input left_button,
    input right_button,
    input reset_button
    //output ground,
    //output score[8]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff scan[20];
  }
  game gamee;
  always
  {
  //ground=b0;
    //score= b11111111;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
  
    
    gamee.start_end_raw=reset_button;
    gamee.left_raw=left_button;
    gamee.right_raw=right_button;
    gamee.clk=clk;
    scan.d=scan.q+1;
    case (scan.q[19:16]){
    
      b000:
        matrix[15:8]=gamee.walla;
        matrix[7:0]=~b10000000;
      b001:
        matrix[15:8]=gamee.wallb;
        matrix[7:0] = ~b01000000;
      b010:
        matrix[15:8]=gamee.wallc;
        matrix[7:0] = ~b00100000;
      b011:
        matrix[15:8]=gamee.walld;
        matrix[7:0] = ~b00010000;
      b100:
        matrix[15:8]=gamee.walle;
        matrix[7:0] = ~b00001000;
      b101:
        matrix[15:8]=gamee.wallf;
        matrix[7:0] = ~b00000100;
      b110:
        matrix[15:8]=gamee.wallg;
        matrix[7:0] = ~b00000010;
      b111:
        matrix[15:8]=gamee.player_location;
        matrix[7:0] = ~b00000001;
        
      default:
        matrix[15:0]=0;
      
      }
  }
}